<%
if params[:id].present?
	user = @account.users.find_by_uid params[:id]
	uuid = user.uid
else
	uuid=""
end

%>
<style>

.chart div {
  font: 10px sans-serif;
  background-color: steelblue;
  text-align: right;
  padding: 3px;
  margin: 1px;
  color: white;
  
}
.chart span {
  font: 10px sans-serif;
  text-align: right;
  padding: 3px;
  margin: 1px;
  color: black;
  
  
}

</style>

<script src="/d3.min.js"></script>
<div class="row">
	<div class="col-lg-4 ds">
		
		<div class="white-panel">
			<div class="white-header">
				<h5>Status: <strong class="ulixes-node"></strong></h5>
			</div>
			<div class="chartGoesHere" ></div>
			<footer>&nbsp;</footer>
		</div>
		<br />
		<div class="white-panel">
			<div class="white-header">
				<h5>Badges</h5>
			</div>
			<ul class="ulixes-badge" ></ul>
			<footer>&nbsp;</footer>
		</div>
		<br />
	</div>
	<div class="col-lg-4 ds">
		<div class="white-panel">
			<div class="white-header">
				<h5>Actions</h5>
			</div>
			<div class="chart ulixes-actions" style="line-height: 35px;"></div>
			
				
			
		</div>
		
		
		
		<br />
	</div>
	<div class="col-lg-4 ds">
		<div class="white-panel">
			<div class="white-header">
				<h5>Select User UID</h5>
			</div>
			<form class="form-inline" role="form" onsubmit="cnt.open($('#uuid').val());return false;">
				<div class="form-group">
					<input id="uuid" name="uuid" class="form-control" id="exampleInputEmail2" placeholder="UUID" value="<%= uuid%>">
				</div>
				<button type="submit" class="btn btn-primary">
					Go
				</button>
			</form>
			<footer>&nbsp;</footer>
		</div>
		<br />
		<div class="darkblue-panel ">
			<div class="darkblue-header">
				<h5>Shoot Events</h5>
			</div>
			
			<form class="form-inline " role="form" onsubmit="cnt.set($('#code').val(),$('#value').val());return false;">
				<div class="form-group ">
					<input name="code" id="code" type="text" class="form-control" placeholder="code" value="a" style="width: 130px;">
				</div>
				<div class="form-group">
					<input name="value" id="value" type="text" class="form-control" placeholder="value" value="1" style="width: 130px;">
				</div>
				<button type="submit" class="btn btn-primary">
					Send
				</button>
			</form>
			<footer>&nbsp;</footer>
		</div>
		<br />
		<div class="green-panel ">
			<div class="green-header">
				<h5>Notifications</h5>
			</div>
			<div class="panel-body" style=" overflow: auto; height: 450px; ">
				<ul class="list-unstyled ulixes-announcements" style="overflow: auto">
					nothing
				</ul>
			</div>
			<footer>&nbsp;</footer>
		</div>
		<br />
	</div>

</div>






<script>
function drawD3(data) {// Draw Bagel for scores
	console.log("draw D3:::", data);
	$(".chartGoesHere").text("");
	var width = 170, height = 170, radius = Math.min(width, height) / 2;
	var color = d3.scale.category10();
	//d3.scale.ordinal().range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);
	var arc = d3.svg.arc().outerRadius(radius - 10).innerRadius(radius - 50);
	var pie = d3.layout.pie().sort(null).value(function(d) {
		return d.value;
	});
	var svg = d3.select(".chartGoesHere").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
	// data.forEach(function(d) {
	// d.population = +d.population;
	// });
	var g = svg.data(data).selectAll(".arc").data(pie(data)).enter().append("g").attr("class", "arc");
	g.append("path").attr("d", arc).style("fill", function(d) {
		return color(d.value);
	});
	g.append("text").attr("transform", function(d) {
		return "translate(" + arc.centroid(d) + ")";
	}).attr("dy", ".35em").style("text-anchor", "middle").text(function(d) {
		return d.data.name + " (" + d.value + ")";
	});
};
function drawD4(data) {// Draw Bagel for activities
	console.log("draw D3:::", data);
	$(".actionChartGoesHere").text("");
	var width = 170, height = 170, radius = Math.min(width, height) / 2;
	var color = d3.scale.category20();
	//d3.scale.ordinal().range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);
	var arc = d3.svg.arc().outerRadius(radius - 20).innerRadius(radius - 50);
	var pie = d3.layout.pie().sort(null).value(function(d) {
		return d.value;
	});
	var svg = d3.select(".actionChartGoesHere").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
	// data.forEach(function(d) {
	// d.population = +d.population;
	// });
	var g = svg.data(data).selectAll(".arc").data(pie(data)).enter().append("g").attr("class", "arc");
	g.append("path").attr("d", arc).style("fill", function(d) {
		return color(d.value);
	});
	g.append("text").attr("transform", function(d) {
		return "translate(" + arc.centroid(d) + ")";
	}).attr("dy", ".35em").style("text-anchor", "middle").text(function(d) {
		return d.data.name ;
	});

};

function badges(data,server) {
	console.log("Badges: ", data);
	
	var width = 300, height = 350;
	$(".badgesCloud").text("");
	var svg = d3.select(".badgesCloud").append("svg").attr("width", width).attr("height", height);

	var force = d3.layout.force().gravity(.05).distance(100).charge(-400).size([width, height]);
	force.nodes(data).start();

	//var link = svg.selectAll(".link").data(data.links).enter().append("line").attr("class", "link");

	var node = svg.selectAll(".node").data(data).enter().append("g").attr("class", "node").call(force.drag);

	node.append("image").attr("xlink:href", function(d){
		return server + d.icon;
	}).attr("x", -25).attr("y", 0).attr("width", 100).attr("height", 100);

	node.append("text").attr("dx", 0).attr("dy", ".35em").text(function(d) {
		return d.name;
	});

	force.on("tick", function() {
		node.attr("transform", function(d) {
			return "translate(" + d.x + "," + d.y + ")";
		});
	});

}

function message(id,data){
	return '<div class="list-group"><a href="#" class="list-group-item"><h4 class="list-group-item-heading">'+data.subject+
		'<span class="glyphicon glyphicon-remove pull-right" onclick="cnt.read('+id+')"></span>'+
		'</h4><p class="list-group-item-text">'+data.message+'</p></a></div>';
}

var testerDataHandler = function(data, server) {
	$(".ulixes-node").text(data.node.name);

	$(".ulixes-badge").text("None");
	data.badges.map(function(k) {
		$(".ulixes-badge").append("<li><img height='60' class='img-circle' width='60' src='" + k.icon + "' title='" + k.name + "'> <span class='badge'>" + k.name + "</span></li>");
	});
	
	function compare(a,b) {
	  if (a.value < b.value)
	     return 1;
	  if (a.value > b.value)
	    return -1;
	  return 0;
	}
	
	data.actions.sort(compare);
	
	$(".ulixes-actions").text("");
	data.actions.map(function(k) {
		$(".ulixes-actions").append("<div style='width: "+k.value+"px;'><span>"+k.name+"</span>"+k.value+"</div>");
	});
	
	$('.ulixes-announcements').text("");
	$('.ulixes-announcements-count').text(data.announcements ? data.announcements.length : 0);
	for (var i = 0; i < data.announcements.length; i += 1) {
		$('.ulixes-announcements').append(data.announcements[i].message + "<br/>");
	}
	console.log("User notifications:: ", data.announcements);
	if (data.announcements.length == 0) {
		$('.ulixes-announcements').html("No New Notifications");
	} else {
		$('.ulixes-announcements').html("");
		data.announcements.map(function(k) {
			$('.ulixes-announcements').append(message(k.id,k.data));
		});

	}
	console.log("testerDataHandler processing:", data);
	//badges(data.badges,"");
	drawD3(data.scores);
	drawD4(data.actions);
};

	var cnt = new Ulixes("/", {
		a_id : <%= @account.id%>,
		k : "<%= @account.key%>",
		session:false
	},testerDataHandler);


$(document).ready(function() {
	cnt.open($('#uuid').val());
	ulixes = cnt;
})

</script>
