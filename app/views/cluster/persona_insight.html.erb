<div class="donut-main">
	<h4>PERSONA <strong><a href="/cluster/paragon/<%= params[:name]%>"><%= params[:name]%></a></strong> ACTIONS & PROGRESS</h4>
	<div id="vector_graph"></div>
	<h4>SPREAD IN MARKETING FLOW</h4>
	<%
	@populations.each{|p|
		%>
		<div class="desc">
		  	<div class="thumb">
		  		<span class="badge bg-theme"><i class="fa fa-clock-o"></i></span>
		  	</div>
		  	<div class="details">
		  		<p><muted><%=p[:name]%></muted><br/>
		  		   <%=p[:size]%><br/>
		  		</p>
		  	</div>
		  </div>
		
		<%
	}
	%>
	<h4>PROXIMITY TO NODE MEDIANS</h4>
	<div class="desc">
		  	<div class="thumb">
		  		<span class="badge bg-theme"><i class="fa fa-clock-o"></i></span>
		  	</div>
		  	<div class="details">
		  		<p><muted>Closest Node Median to this Persona is</muted> <br />
		  			<strong><%= @nodes.first.name%></strong>
			
		  		</p>
		  	</div>
		  </div>
	<div class="desc">
		  	<div class="thumb">
		  		<span class="badge bg-theme"><i class="fa fa-clock-o"></i></span>
		  	</div>
		  	<div class="details">
		  		<p><muted>In order of similarity:</muted><br/>
		  		    <strong><%= @nodes.map{|n| n.name}.join(", ")%></strong><br/>
		  		</p>
		  	</div>
		  </div>
</div>





<script>
function vectorPie(data) {// Draw Bagel for activities
	console.log("draw D3:::", data);
	$("#vector_graph").text("");
	var width = 200, height = 200, radius = Math.min(width, height) / 2;
	var color = d3.scale.category20();
	//d3.scale.ordinal().range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);
	var arc = d3.svg.arc().outerRadius(radius - 20).innerRadius(radius - 50);
	var pie = d3.layout.pie().sort(null).value(function(d) {
		return d.value;
	});
	var svg = d3.select("#vector_graph").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
	// data.forEach(function(d) {
	// d.population = +d.population;
	// });
	var g = svg.data(data).selectAll(".arc").data(pie(data)).enter().append("g").attr("class", "arc");
	g.append("path").attr("d", arc).style("fill", function(d) {
		return color(d.value);
	});
	g.append("text").attr("transform", function(d) {
		return "translate(" + arc.centroid(d) + ")";
	}).attr("dy", ".35em").style("text-anchor", "middle").text(function(d) {
		
		if(d.value>0){
			console.log("::::",d);
			return d.data.name;
		}else{
			return "";
		}
		
	});

};

vectorPie(<%= raw(@vector.map{|k,v| {:name=>k, :value=>v}}.to_json)%>);
</script>